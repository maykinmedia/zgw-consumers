# Generated by Django 3.2.15 on 2022-08-18 12:12
import django.db.models.deletion
from django.db import migrations, models


def get_operation(forwards: bool = True):
    from_app = "zgw_consumers" if forwards else "simple_certmanager"
    to_app = "simple_certmanager" if forwards else "zgw_consumers"

    def migrate_data(apps, _):
        NewCertificate = apps.get_model(to_app, "Certificate")
        OldCertificate = apps.get_model(from_app, "Certificate")

        old_certs = OldCertificate.objects.all()

        for old_cert in old_certs:
            new_cert = NewCertificate(
                id=old_cert.id,
                label=old_cert.label,
                type=old_cert.type,
                public_certificate=old_cert.public_certificate,
                private_key=old_cert.private_key,
            )
            new_cert.save()

    return migrate_data


class Migration(migrations.Migration):

    dependencies = [
        ("simple_certmanager", "0001_initial"),
        ("zgw_consumers", "0015_auto_20220307_1522"),
    ]

    operations = [
        migrations.RunPython(get_operation(forwards=True), migrations.RunPython.noop),
        migrations.AlterField(
            model_name="service",
            name="client_certificate",
            field=models.ForeignKey(
                blank=True,
                help_text="The SSL/TLS certificate of the client",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="service_client",
                to="simple_certmanager.certificate",
            ),
        ),
        migrations.AlterField(
            model_name="service",
            name="server_certificate",
            field=models.ForeignKey(
                blank=True,
                help_text="The SSL/TLS certificate of the server",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="service_server",
                to="simple_certmanager.certificate",
            ),
        ),
        migrations.RunPython(migrations.RunPython.noop, get_operation(forwards=False)),
        migrations.DeleteModel(
            name="Certificate",
        ),
        migrations.CreateModel(
            name="Certificate",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("simple_certmanager.certificate",),
        ),
    ]
